---
title: "Conversion of an .Rmd-file"
---

TODO: for now, the script `10_kontingenztafel_erstellen.Rmd` is the only one that is up to date like it is described here. The other scripts need to be updated to the new structure.

The directory of each exercise contains an Rmarkdown file called `exname_erstellen.Rmd`, where `exname` is the name of that exercise. The code chunks in this file can be executed to generate HTML previews of the exercise or XML files which can be imported into Moodle. 

# Basic structure

- Setup
- Parameters
- HTML preview
- XML generation
- \[Checking the distribution of drawn subsets\]

To generate the exercises, set the parameters in the `parameters` code chunk and run the `generate` code chunk to create the XML files ready for import into Moodle. To first preview a single exercises in HTML format, run the `preview` code chunk.

For a more detailed explanation of the structure, see the following sections.

## Setup 

::: callout-note
Run this code chunk once before any of the others. 
:::

This code chunk does not require any edits by the user. 

When executed, the `exams` library is loaded. R will try to automatically set the working directory to the source file location. If this fails and the paths to the exercise files cannot be found, this must be done manually. 

For correctly displaying mathematical expressions and tables, `pandoc` is set to be used by the `exams` package to convert the exercise files to HTML. 

In some exercises, the localization and encoding might be set to German UTF-8 to ensure that special characters are displayed correctly.

## Parameters

::: callout-note
Run this code chunk once after setup or when using new parameters. 
:::

This code chunk contains the parameters set by the users to generate the exercises.

First, a seed must be set. This ensures that the same set of exercises is generated each time the code is run. 

::: callout-tip
When generating exercises for a course, it is recommended to set the seed to a fixed value and note it down. At the start of each semester, a new seed should be set to ensure that the exercises are different from the previous semester. 
:::

Then, the number of times the exercise should be generated is set with the `copies` parameter. If parts of the exercise are randomized (e.g., drawing from a distribution or a random subset), each copy will be randomly generated. However, the seed ensures that always the same set of randomized exercises is generated.

The paths to the directories containing the exercise and data files must each be set, as well as the name of the exercise file. The name of the directory storing temporary files must also be set. If not present, the directory will be created.

::: callout-warning
All files in the temporary directory will be deleted when the code is run!
:::

Finally, the base name of the output files is set. 

## HTML preview

The `preview` code chunk generates an HTML preview of the exercise, which will open in the default browser. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated and prior to that (in case an error interrupted the process and removal of temporary files). 

Information about the generated exercise are stored in the `exinfo` object in the R workspace. This object can be inspected to check the exercise's metadata.

## XML generation

The `generate` code chunk generates the XML files for the exercises. The XML files are stored in the exercise's root directory. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated and prior to that (in case an error interrupted the process and removal of temporary files). 

Information about the generated exercises are stored in the `exinfo` object in the R workspace. This object can be inspected to check the exercise's metadata, or be analyzed further, e. g. to plot the distribution of answers if the exercise utilizes randomization. 

### Passing external parameters

The number of exercise copies specified by the `copies` parameter will be generated in a loop, using the `exams` function `expar()` to pass external parameters to the exercise. For example, the incrementing number of the loop can be passed to the exercise where it is used as index to draw a subset of data. The advantage of this approach is that the subsets are drawn deterministically instead of randomly (which could lead to duplicates or missing subsets). 

The function takes the exercise file and the external variables as arguments. It then saves an temporary Rmarkdown file of the exercise with the external parameters set. The list of these temporary files is then passed to the `exams2moodle()` function to generate the XML files.

### Checking the distribution of drawn subsets

To make sure that the proportions of the drawn subsets are equal, the `plot-distribution` code chunk can be run. It will show a barplot of the number of times each subset was drawn.

::: callout-tip
The number of copies should be set to a multiple of the number of subsets to ensure that each subset is drawn an equal number of times.
:::