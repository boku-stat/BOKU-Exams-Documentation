{"title":"Structure of an .Rmd-file","markdown":{"yaml":{"title":"Structure of an .Rmd-file"},"headingText":"Basic Structure","containsRefs":false,"markdown":"\n\nThe .Rmd is the main file, where all the information about the exercise is contained. It follows a basic structure, with four sections, \"Data Generation\", \"Question\", \"Solution\" and \"Meta-information\". Their purpose will be described in detail in the following sections.\n\n\n-   Data Generation (code chunk)\n\n-   Question\n\n-   Solution\n\n-   Meta-information\n\nThe first section Data Generation, is marked by a code chunk, which is different from the other three sections. \n\n```{{r}} \n# code is placed here \n```\n\nThe other three sections are marked as follows \n\n```R\nQuestion3\n========\ntext is written here. \n... \n\nSolution\n========\nmore text is written here. \n```\n\n\n## Data Generation\n\nIn this section of the .Rmd-file, the questions (including answer options for single/multiple choice questions), solutions, the types of questions, explanations and tolerances for solutions are created and stored in list objects for later. In addition there are many additional possibilities, like sampling data, creating graphs, importing pictures etc. which will be discussed later (See section ???????)\n\n### Description of the lists\n\nThe five necessary lists are `questions`, `solutions`, `types`, `explanations` and `tolerances`, which all have the same length, which is equal to the number of questions in the exercise. For example, in an exercise with 5 multiple choice questions, the length of the lists is 5.\n\nDepending on the type and simplicity of the question, some of the lists might not be necessary. (see ??????)\n\nThe list `questions` contains the answer options for single choice/multiple choice questions, not the questions itself. The actual questions are written down in the section \"Question\". For numeric and string questions, this list contains placeholders \"\", since no answer options are given. (more on the types of questios see ??????)\n\nThe list `solutions` contains the solutions for all the questions. For numeric questions, that is a number, (e.g: `123`), for string questions a string like `\"hello world\"` is expected. The solution for single & multiple choiche questions is a boolean vector containing `TRUE/FALSE`. For each answer option, one instance of `TRUE` or `FALSE` is needed. For example, a multiple choice question with 5 answer options, where one option (in this case the second answer option) is correct, would have a solution vector like this:\n\n``` r\nc(FALSE, TRUE, FALSE, FALSE, FALSE)\n```\n\nThe list `types` specifies the type of question for each individual question. Possible values are\n\n-   numeric (\"num\")\n\n-   string (\"string\")\n\n-   single choice (\"schoice\")\n\n-   multiple choice (\"mchoice\")\n\nThe list `explanations` contains the feedback that is shown. This can be the complete solutions or additional information like the seed, that was used to create this exercise, session info, etc.\n\nThe list `tolerances` is only necessary for numeric questions, where it is desired to have an interval, in which the solution is accepted as correct, even though the numbers are not perfectly equal. This is important for accommodating rounding differences.\n\n::: callout-warning\nCareful when random generating numbers and setting an (absolute) tolerance interval that is too narrow, then the true solution could lie outside of the tolerance interval.\n:::\n\n### Creating the lists\n\nThey are initailized as empty lists, which are later filled with the desired information via subsetting. see ?????\n\n``` r\nquestions <- list() \nsolutions <- list() \ntypes <- list()\nexplanations <- list() \ntolerances <- list()\n```\n\n## Question\n\nIn this section, all the questions, that should be included in the exam, are written down. This is done in natural language, however bits of code (including objects), graphs, data, etc. can be included (see ??????)\n\nAddional text, like instructions, hints, context, etc. is also written down in this section.\n\n### Questions with answer fields\n\nThe answer fields mark the place were the answer input should be placed, for example in a moodle quiz, the place where the empty answer box is placed.\n\nAnswer fields are marked by `##ANSWERi##`where i is the number of the question, starting with 1.\n\n::: callout-tip\n### numeric example\n\nNumeric question: How many continents are there? `##ANSWER1##`\n\nIn this case, the answer field is a placeholder, nothing will be displayed, which equals an empty answer field in moodle.\n:::\n\nFor single/multiple choice questions, `##ANSWERi##` represents the answer options. \n\n::: callout-tip\n### schoice example\n\nSingle choice question: Is Vienna the capital of Austria? `##ANSWER2##` \n\nWith the correct setup, this will display `yes/no` instead of the answer field. In moodle this is a drop-down menu with the two answer options.\n:::\n\n\n::: callout-tip\n### mchoice example\n\nMultiple choice question with text components as answer options: The number 3 is `##ANSWER3##` 1.\n\nPossible answer options are \"greater than\", \"smaller than\", \"equal to\", which would be displayed instead of the answer field. In moodle all answer options are shown as tickable boxes.\n:::\n\npossible add-ons: pictures, graphs, data, csv.files tables, R-code, etc. see description later\n\nThe function answerlist() from R/exams package converts the answer options, which are stored in the list object \"questions\" into the necessary format.\n\n```{r}\n1+1\n\n#answerlist(unlist(questions), markup = \"markdown\")\n\n```\n\n``` {{r}}\n1+1\n\nanswerlist(unlist(questions), markup = \"markdown\")\n```\n\n``` r\n1+1\n\nanswerlist(unlist(questions), markup = \"markdown\")\n```\n## Solution\n\nthe Solution part is used to provide the correct solution to a question and display it in the generated output. This part is not used directly for grading but serves as documentation or a reference for review and to explain the answer. It is usefull to document the seed used to generate all the data. This is done by accesing the Seed by ??????? \"Seed: r seed\". If your solutions list has \"TRUE/FALSE\"-vectors, they need to be converted into string.\n\n\n## MetaInformation\n\nTo create the exercise via the exams-package it is necessary to define special properties of that exercise. The key information we need are:\n\nexname: Exercise name, typically a unique identifier for each exercise, helping to manage and retrieve exercises easily from an exercise pool\n\nextitel: Sets the title of the exercise. Titles can be dynamically generated by embedding R code within backticks to adapt based on the exercise context.\n\nextype: Specifies the type of exercise. Since we want to use are mixture of different types, we mainly use cloze\n\nexsolution: Defines the correct solutions to the exercise. Since in our exercises mostly multiple answers are needed, the different solutions are separated by |.\n\nexclozetypes: When using the cloze types, we have to define each subtypes for the cloze questions, which we saved in our list obejct \"types\". Once again they need to be separated by |.\n\nextol: Defines the acceptable tolerance for numeric answers, typically used for cloze questions where each gap has a numeric solution with a margin of error. \n\n???? backticks temporarily removed due to error with code execution\n```R\nexname: name of the exercise\nextitle: titel of the exercise\nextype: cloze\nexsolution: r paste(solutions, collapse = \"|\")\nexclozetype: r paste(types, collapse = \"|\")\nextol: r paste(tolerances, collapse = \"|\")\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"structure-Rmd.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.475","editor":"visual","theme":"cosmo","title":"Structure of an .Rmd-file"},"extensions":{"book":{"multiFile":true}}}}}