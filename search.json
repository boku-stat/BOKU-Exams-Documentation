[
  {
    "objectID": "first-steps.html",
    "href": "first-steps.html",
    "title": "First Steps",
    "section": "",
    "text": "R/exams is used to automatically generate and evaluate exam questions. see here for more info about R and R/exams ?????\nAt BOKU, it is used by the Institute for Statistics in several courses. Homework, review exercises and exams in the form of paper exams, as well as online quizes on BOKUlearn are all created with R/exams. Currently this is mostly used for (introductory) courses for statistics, however, the application is not limited to statistical applications at all.\nThis documentation should serve as a basic first introduction and a how-to for anyone interested in using R/exams for teaching their courses at BOKU.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-program-and-what-files-are-used",
    "href": "first-steps.html#what-program-and-what-files-are-used",
    "title": "First Steps",
    "section": "What program and what files are used?",
    "text": "What program and what files are used?\nThe generation of the exams is happening within RStudio. See how to install R and RStudio.\nGenerally, a structure of folders and files (see template here ????) are used, which all have a specific purpose. For a basic implementation, two types of files are necessary, namely .R-files and .Rmd-files.\n.R-files are scripts written in R, where R code is written and evaluated.\n.Rmd-files are files written in markdown, a markup language, where it is possible to process normal text, (R) code and other components and generate reports in various formats (pdf, Word etc.) as well as web applications such as HTML pages.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-is-in-the-files",
    "href": "first-steps.html#what-is-in-the-files",
    "title": "First Steps",
    "section": "What is in the files?",
    "text": "What is in the files?\nThe .Rmd-file contains the questions, answers and other necessary parameters for creating the exam (see ????? for more details). These components are created by the person wanting to create an exam, however they need to be written according to a certain structure, see here ?????.\nThe .R file contains the code, which converts the questions that are written in the .Rmd-file into the actual exam in a certain output format. Several formats are possible, such as .pdf, HTML and .xml for Moodle quizzes. (see ??? for more details) This code is based on the functionality of the R/exams package.\nAn additonal separate .R-file can contain other R objects, which are then (dynamically) used in exam questions, however this is not a necessary component. For more information about add ons see ????.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-does-the-exam-look-like",
    "href": "first-steps.html#what-does-the-exam-look-like",
    "title": "First Steps",
    "section": "What does the exam look like?",
    "text": "What does the exam look like?\nAn exam can contain many different types of questions. R/exams is suitable for creating not only calculation questions, but also multiple or single questions, open answer questions (single word or essay questions) or including upload points in Moodle exams. It is possible to use any combination in one exam, eg. two numeric and three multiple choice questions.\ninsert example ????\nR/exams does not only have statistical applications, the look of the exam is entirely customizable. It is also possible to include data, graphs, pictures and other things, see ????.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#how-can-rexams-prohibit-cheating",
    "href": "first-steps.html#how-can-rexams-prohibit-cheating",
    "title": "First Steps",
    "section": "How can R/exams prohibit cheating?",
    "text": "How can R/exams prohibit cheating?\nWith R/exams it is possible to create a (very) large number of different versions of the same exam. (see ???? conversion) Slight automatic alterations lead to an individualized exam for each student. For example, this can be used to be able to use the same materials for different exercise groups or to prohibit cheating by having slighty different questions for each student.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#in-what-ways-can-an-exam-be-individualized",
    "href": "first-steps.html#in-what-ways-can-an-exam-be-individualized",
    "title": "First Steps",
    "section": "In what ways can an exam be individualized?",
    "text": "In what ways can an exam be individualized?\nchanging text/context/stories\nthis can also be used for tailoring the exam across programs at BOKU\nchanging data/numbers\ncreating a pool of true/false statements -&gt; randomly drawn\ndifferent answer options for single/mutiple choice",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#how-can-the-exams-be-corrected",
    "href": "first-steps.html#how-can-the-exams-be-corrected",
    "title": "First Steps",
    "section": "How can the exams be corrected?",
    "text": "How can the exams be corrected?\nDifferent methods for different output formats\nmoodle -&gt; automatic correction, solution imported\npdf: solutions, also possible to scan answer sheets for mchoice schoice\nsee correction methods moodle ????\nsee correction methods PDF etc.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "add-ons.html",
    "href": "add-ons.html",
    "title": "Add-ons of .Rmd-files",
    "section": "",
    "text": "This will describe how to include additional things, e.g: tables, pictures, graphs, csv-files, etc.",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#including-inline-code",
    "href": "add-ons.html#including-inline-code",
    "title": "Add-ons of .Rmd-files",
    "section": "Including inline code",
    "text": "Including inline code",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "This will describe frequently asked questions and common mistakes.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BOKU Exams",
    "section": "",
    "text": "Documentation for R/exams at BOKU.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "conversion.html",
    "href": "conversion.html",
    "title": "Conversion of an .Rmd-file",
    "section": "",
    "text": "TODO: for now, the script 10_kontingenztafel_erstellen.Rmd is the only one that is up to date like it is described here. The other scripts need to be updated to the new structure.\nThe directory of each exercise contains an Rmarkdown file called exname_erstellen.Rmd, where exname is the name of that exercise. The code chunks in this file can be executed to generate HTML previews of the exercise or XML files which can be imported into Moodle.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#setup",
    "href": "conversion.html#setup",
    "title": "Conversion of an .Rmd-file",
    "section": "Setup",
    "text": "Setup\n\n\n\n\n\n\nNote\n\n\n\nRun this code chunk once before any of the others.\n\n\nThis code chunk does not require any edits by the user.\nWhen executed, the exams library is loaded. R will try to automatically set the working directory to the source file location. If this fails and the paths to the exercise files cannot be found, this must be done manually.\nFor correctly displaying mathematical expressions and tables, pandoc is set to be used by the exams package to convert the exercise files to HTML.\nIn some exercises, the localization and encoding might be set to German UTF-8 to ensure that special characters are displayed correctly.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#parameters",
    "href": "conversion.html#parameters",
    "title": "Conversion of an .Rmd-file",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\nNote\n\n\n\nRun this code chunk once after setup or when using new parameters.\n\n\nThis code chunk contains the parameters set by the users to generate the exercises.\nFirst, a seed must be set. This ensures that the same set of exercises is generated each time the code is run.\n\n\n\n\n\n\nTip\n\n\n\nWhen generating exercises for a course, it is recommended to set the seed to a fixed value and note it down. At the start of each semester, a new seed should be set to ensure that the exercises are different from the previous semester.\n\n\nThen, the number of times the exercise should be generated is set with the copies parameter. If parts of the exercise are randomized (e.g., drawing from a distribution or a random subset), each copy will be randomly generated. However, the seed ensures that always the same set of randomized exercises is generated.\nThe paths to the directories containing the exercise and data files must each be set, as well as the name of the exercise file. The name of the directory storing temporary files must also be set. If not present, the directory will be created.\n\n\n\n\n\n\nWarning\n\n\n\nAll files in the temporary directory will be deleted when the code is run!\n\n\nFinally, the base name of the output files is set.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#html-preview",
    "href": "conversion.html#html-preview",
    "title": "Conversion of an .Rmd-file",
    "section": "HTML preview",
    "text": "HTML preview\nThe preview code chunk generates an HTML preview of the exercise, which will open in the default browser. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated and prior to that (in case an error interrupted the process and removal of temporary files).\nInformation about the generated exercise are stored in the exinfo object in the R workspace. This object can be inspected to check the exercise’s metadata.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#xml-generation",
    "href": "conversion.html#xml-generation",
    "title": "Conversion of an .Rmd-file",
    "section": "XML generation",
    "text": "XML generation\nThe generate code chunk generates the XML files for the exercises. The XML files are stored in the exercise’s root directory. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated and prior to that (in case an error interrupted the process and removal of temporary files).\nInformation about the generated exercises are stored in the exinfo object in the R workspace. This object can be inspected to check the exercise’s metadata, or be analyzed further, e. g. to plot the distribution of answers if the exercise utilizes randomization.\n\nPassing external parameters\nThe number of exercise copies specified by the copies parameter will be generated in a loop, using the exams function expar() to pass external parameters to the exercise. For example, the incrementing number of the loop can be passed to the exercise where it is used as index to draw a subset of data. The advantage of this approach is that the subsets are drawn deterministically instead of randomly (which could lead to duplicates or missing subsets).\nThe function takes the exercise file and the external variables as arguments. It then saves an temporary Rmarkdown file of the exercise with the external parameters set. The list of these temporary files is then passed to the exams2moodle() function to generate the XML files.\n\n\nChecking the distribution of drawn subsets\nTo make sure that the proportions of the drawn subsets are equal, the plot-distribution code chunk can be run. It will show a barplot of the number of times each subset was drawn.\n\n\n\n\n\n\nTip\n\n\n\nThe number of copies should be set to a multiple of the number of subsets to ensure that each subset is drawn an equal number of times.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "ideas.html",
    "href": "ideas.html",
    "title": "Ideas",
    "section": "",
    "text": "This is the page for future ideas and important notes for documentation.\nWriting style (internal)",
    "crumbs": [
      "Ideas"
    ]
  },
  {
    "objectID": "ideas.html#footnotes",
    "href": "ideas.html#footnotes",
    "title": "Ideas",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://stackoverflow.com/questions/78569518/why-is-r-inline-code-not-executed-in-quarto-in-some-situations↩︎",
    "crumbs": [
      "Ideas"
    ]
  },
  {
    "objectID": "structure-Rmd.html",
    "href": "structure-Rmd.html",
    "title": "Structure of an .Rmd-file",
    "section": "",
    "text": "The .Rmd is the main file, where all the information about the exercise is contained. It follows a basic structure, with four sections, “Data Generation”, “Question”, “Solution” and “Meta-information”. Their purpose will be described in detail in the following sections.",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#data-generation",
    "href": "structure-Rmd.html#data-generation",
    "title": "Structure of an .Rmd-file",
    "section": "Data Generation",
    "text": "Data Generation\nIn this section of the .Rmd-file, the questions (including answer options for single/multiple choice questions), solutions, the types of questions, explanations and tolerances for solutions are created and stored in list objects for later. In addition there are many additional possibilities, like sampling data, creating graphs, importing pictures etc. which will be discussed later (See section ???????)\n\nDescription of the lists\nThe five necessary lists are questions, solutions, types, explanations and tolerances, which all have the same length, which is equal to the number of questions in the exercise. For example, in an exam with 5 multiple choice questions, the length of the lists is 5.\nDepending on the type and simplicity of the question, some of the lists might not be necessary. (see ??????)\nThe list questions contains the answer options for single choice/multiple choice questions, not the questions itself. The actual questions are written down in the section “Question”. For numeric and string questions, this list contains placeholders ““, since no answer options are given. (more on the types of questions see ??????)\nThe list solutions contains the solutions for all the questions. For numeric questions, that is a number, (e.g: 123), for string questions a string like \"hello world\" is expected. The solution for single & multiple choiche questions is a boolean vector containing TRUE/FALSE. For each answer option, one instance of TRUE or FALSE is needed. For example, a multiple choice question with 5 answer options, where one option (in this case the second answer option) is correct, would have a solution vector like this:\nc(FALSE, TRUE, FALSE, FALSE, FALSE)\nThe list types specifies the type of question for each individual question. Possible values are\n\nnumeric (“num”)\nstring (“string”)\nsingle choice (“schoice”)\nmultiple choice (“mchoice”)\n\nThe optional list explanations contains the feedback that is shown. This can be the complete solutions (it should be then formatted as a list) or additional information like the seed, that was used to create this exercise, session info, etc., which can be written in the “Solution” section. (see ??????)\nThe list tolerances is only necessary for numeric questions, where it is desired to have an interval, in which the solution is accepted as correct, even though the numbers are not perfectly equal. This is important for accommodating rounding differences.\n\n\n\n\n\n\nWarning\n\n\n\nCareful when random generating numbers and setting an (absolute) tolerance interval that is too narrow, then the true solution could lie outside of the tolerance interval.\n\n\n\n\nCreating the lists\nThey are initialized as empty lists, which are later filled with the desired information via sub-setting. see ?????\nquestions &lt;- list() \nsolutions &lt;- list() \ntypes &lt;- list()\nexplanations &lt;- list() \ntolerances &lt;- list()",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#question",
    "href": "structure-Rmd.html#question",
    "title": "Structure of an .Rmd-file",
    "section": "Question",
    "text": "Question\nIn this section, all the questions, that should be included in the exam, are written down. This is done in natural language, however bits of code (including R objects), graphs, data, etc. can be included (see ??????)\nAdditonal text, like instructions, hints, context, etc. is also written down in this section.\n\nQuestions with answer fields\nThe answer fields mark the place were the answer input should be placed, for example in a moodle quiz, the place where the empty answer box is placed.\nAnswer fields are marked by ##ANSWERi##where i is the number of the question, starting with 1.\n\n\n\n\n\n\nnumeric example\n\n\n\nNumeric question: How many continents are there? ##ANSWER1##\nIn this case, the answer field is a place-holder, nothing will be displayed, which equals an empty answer field in moodle.\n\n\nFor single/multiple choice questions, ##ANSWERi## represents the answer options.\n\n\n\n\n\n\nschoice example\n\n\n\nSingle choice question: Is Vienna the capital of Austria? ##ANSWER2##\nWith the correct set-up, this will display yes/no instead of the answer field. In moodle this is a drop-down menu with the two answer options.\n\n\n\n\n\n\n\n\nmchoice example\n\n\n\nMultiple choice question with text components as answer options: The number 3 is ##ANSWER3## 1.\nPossible answer options are “greater than”, “smaller than”, “equal to”, which would be displayed instead of the answer field. In moodle all answer options are shown as tickable boxes.\n\n\npossible add-ons: pictures, graphs, data, csv.files tables, R-code, etc. see description later\nThe function answerlist() from R/exams package converts the answer options, which are stored in the list object questions into the necessary format.\nanswerlist(unlist(questions), markup = \"markdown\")",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#solution",
    "href": "structure-Rmd.html#solution",
    "title": "Structure of an .Rmd-file",
    "section": "Solution",
    "text": "Solution\nThe section “Solution” can be used to provide solutions in the form of explanations. It does not create the solutions to the questions (see ?????) and nor is it responsible for assessing/grading questions. Instead it can be used as a reference to review questions or provide feedback. This type of information is created in this section.\nThe solutions list contains the actual solutions to the questions, which are used for deeming an answer correct/incorrect, however these are not directly displayed in this section.\nThe explanations list holds any information that can be possibly given as feedback. This can, but does not have to, include the actual solutions, depending on the type of exam one is aiming for. This list is optional, general feedback can be normally written as text in this section. See ???? two sections below\n\nActual Solutions as explanations\nThe correct solutions to the questions can be displayed in the appropriate format in the generated output.\nSome solutions need to be converted to a more understandable format before being displayed. The solutions to schoice/mchoice questions are stored as TRUE/FALSE vectors and in the following code chunk they are converted to “True” and “False” strings, which are then displayed as explanations to the schoice and mchoice questions.\nfor (x in 1:length(solutions)) {\n\n  if (types[x] %in% c(\"schoice\", \"mchoice\") { \n    explanations[x] &lt;- solutions[x] |&gt; lapply(function(x) ifelse(x, \"True\", \"False\"))\n  } \n  \n  else {\n    explanations[x] &lt;- solutions[x]\n  }\n}\nThen the function answerlist() from R/exams processes the explanations list to adjust it to the format needed for conversion of the .Rmd-file to the desired output.\nanswerlist(unlist(explanations), markup = \"markdown\")\n\n\nOther types of explanations\nWhen the desired feedback is any type of text, like in-depth explanations or providing more context, or more technical details like calculation steps, the explanations list is not needed. It can simple written as normal text in the .Rmd file under the “Solution” section.\nExamples of feedback:\n\n\n\n\n\n\nnumeric example\n\n\n\nThe correct answer is 7, because there are seven recognized continents on Earth: \nAfrica, Antarctica, Asia, Europe, North America, Oceania (or Australia), and South America.\n\n\n\n\n\n\n\n\nmchoice example\n\n\n\nThe correct answers are \"A\" and \"C.\" \nOption A is correct because..., and Option C is correct because... \nOption B, however, is incorrect because .....\n\n\nIn some cases it can be useful to document the seed used, for example when randomly generating numbers or doing any kind of sampling. Providing this information in the “Solution” section to either students or even oneself, when for example reviewing questions, can ensure reproducibility.\nSee ???? for more information on how to dynamically display R objects (like seeds) in the exam.",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#meta-information",
    "href": "structure-Rmd.html#meta-information",
    "title": "Structure of an .Rmd-file",
    "section": "Meta-information",
    "text": "Meta-information\nThis section contains all the information necessary for the conversion from an .Rmd-file to the desired output (HTML, Moodle (xml), pdf, …) see ???\n\nMeta-information\n\n\n\n\n\n\nTag\nDescription\n\n\n\n\nexname\nname for the exam, should be short and informative\n\n\nextitle\nlonger name for the exam, displayed in Moodle\n\n\nextype\nspecification of the type of exam, e.g: “cloze”\n\n\nexsolution\nsolutions to the questions\n\n\nextypes\nspecification of the types of questions used in the exam\n\n\nextol\ntolerances used for numeric questions\n\n\nexshuffle\nlogical or numeric value, if/how answer options for schoice/mchoice questions should be shuffled\n\n\nexversion\nversion of the exam\n\n\n\nAlso see vignette R/exams for additional tags and more information.\n\nTypes of Meta-information tags\n\nexname\nExercise name, typically a unique identifier for each exercise, helping to manage and retrieve exercises easily from an exercise pool.\n\n\nextitle\nSets the title of the exercise. Titles can be dynamically generated by embedding R objects in the text to adapt the title based on the exam context. see ?????\n\n\nextype\nSpecifies the type of exam. This is different to the list object types from the “Data generation” section. A very common type is “cloze”, which is a type of exam which contains different types of questions, for example a combination of numeric and schoice questions in one exam. If the exam just contains one type of question, for example only multiple choice questions, then this can be specified as well. see ???? for more information on non-cloze exams.\n\n\nexsolution\ncontains the correct solutions for the exam in the necessary format for the conversion of the .Rmd-file. When more than one question (and therefore more than one solution) is created, all solutions need to be in the order of the questions and separated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(solutions, collapse = \"|\")\nThe resulting R object needs to be dynmically included in the .Rmd-file (see ?????? for details).\n\n\nexclozetypes\nWhen creating an exam of the type “cloze” (the exam contains different types of questions), the type of each question has to be specified. This information is stored in the list typesfrom above. When more than one question (and therefore more than one type) is created, all types need to be in the order of the questions and separated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(types, collapse = \"|\")\nThe resulting R object needs to be dynmically included in the .Rmd-file (see ?????? for details).\n\n\nextol\ncontains the tolerances used for the answers to numeric questions. When creating an exam of type “cloze”, the tolerances are stored in the list tolerances. They need to be in the order of the questions with empty interations for questions where tolerances are not applicable, e.g. string questions. For details see ??????? (subsetting the lists). All tolerances need to be seperated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(tolerances, collapse = \"|\")\nThe resulting R object needs to be dynamically included in the .Rmd-file (see ?????? for details).\n\n\nexshuffle\nCan be a logical or an integer and determines if or how the answer options are shuffled. When it is set to TRUE the answer options are not always displayed in the same order, for example when creating multiple versions of the same exam. When set to an integer, this determines the number of multiple choice answer options shown. For example, when 6 answer options are available through the list object questions and exshuffle is set to 4, then 4 out of 6 questions (always including the true option(s)) are displayed.\n\n\nexversion\nSpecifies the version of the exam, useful for distinction when altering the .Rmd-file and creating a new set of exercises.\n\n\n\n\n\n\nExample\n\n\n\nThis is the meta-information of a very simple exam, containing one numeric question, one single choice and one multiple choice question with three answer options, without any automation using the lists and paste().\nexname: homework_1\nextitle: Homework 1: Topic A  \nextype: cloze\nexsolution: 42.1|TRUE|c(FALSE,TRUE, FALSE)\nexclozetype: num|schoice|mchoice\nextol: 0.5|0|0\nexshuffle: TRUE\nexversion: v1\n\n\n\n\n\nExemplary structure of the Meta-information\nBelow is an example of how the “meta-information” section could look with some of the R/exams tags explained above, as well as automatic conversion of the solutions, types and tolerances list to the correct format using paste().\nMeta-information\n================\nexname: Abcde\nextitle: Abcde: topic xyz \nextype: cloze\nexsolution: `r paste(solutions, collapse = \"|\")`\nexclozetype: `r paste(types, collapse = \"|\")`\nextol: `r paste(tolerances, collapse = \"|\")`\nexshuffle: TRUE\nexversion: v1",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "r-exams.html",
    "href": "r-exams.html",
    "title": "R and R/exams",
    "section": "",
    "text": "This will give general information on the R/exams package and links to existing documentation.\nR is an open source software\nstatistical applications\nmany extra packages that can easily be installed\nRstudio IDE\nExams is a package used for automatically generating and evaluating exams.\nLink to CRAN:\ndeveloped by ….\na lot of possibilities, with existing documentation, also stack overflow\nthis documentation focuses on the use at BOKU and the parts of R/exams that are used by the Institute of Statistics",
    "crumbs": [
      "R and R/exams Info"
    ]
  },
  {
    "objectID": "creation-Rmd.html",
    "href": "creation-Rmd.html",
    "title": "Creation of the .Rmd file",
    "section": "",
    "text": "this section contains info on how to subset the lists in the rmd-file\n\nsubsetting\nwhat type of content needs to be in the lists\nlimitations",
    "crumbs": [
      "Rmd-file",
      "Creation of the .Rmd-file"
    ]
  }
]