[
  {
    "objectID": "first-steps.html",
    "href": "first-steps.html",
    "title": "First Steps",
    "section": "",
    "text": "R/exams is used to automatically generate and evaluate exam questions. See here for more info about R and R/exams ?????\nAt BOKU, it is used by the Institute for Statistics in several courses. Homework, review exercises and exams in the form of paper exams, as well as online quizes on BOKUlearn are all created with R/exams. Currently this is mostly used for (introductory) courses for statistics, however, the application is not limited to statistical applications at all.\nThis documentation should serve as a basic first introduction and a how-to for anyone interested in using R/exams for teaching their courses at BOKU.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-program-and-what-files-are-used",
    "href": "first-steps.html#what-program-and-what-files-are-used",
    "title": "First Steps",
    "section": "What program and what files are used?",
    "text": "What program and what files are used?\nThe generation of the exams is happening within RStudio. See how to install R and RStudio.\nGenerally, a structure of folders and files (see template here ????) are used, which all have a specific purpose. For a basic implementation, two types of files are necessary, namely .R-files and .Rmd-files.\n.R-files are scripts written in R, where R code is written and evaluated.\n.Rmd-files are files written in markdown, a markup language, where it is possible to process normal text, (R) code and other components and generate reports in various formats (pdf, Word etc.) as well as web applications such as HTML pages.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-is-in-the-files",
    "href": "first-steps.html#what-is-in-the-files",
    "title": "First Steps",
    "section": "What is in the files?",
    "text": "What is in the files?\nThe .Rmd-file contains the questions, answers and other necessary parameters for creating the exam (see ????? for more details). These components are created by the person wanting to create an exam, however they need to be written according to a certain structure, see here ?????.\nThe .R file contains the code, which converts the questions that are written in the .Rmd-file into the actual exam in a certain output format. Several formats are possible, such as .pdf, HTML and .xml for Moodle quizzes. (see ??? for more details) This code is based on the functionality of the R/exams package.\nAn additonal separate .R-file can contain other R objects, which are then (dynamically) used in exam questions, however this is not a necessary component. For more information about add ons see ????.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#what-does-the-exam-look-like",
    "href": "first-steps.html#what-does-the-exam-look-like",
    "title": "First Steps",
    "section": "What does the exam look like?",
    "text": "What does the exam look like?\nAn exam can contain many different types of questions. R/exams is suitable for creating not only calculation questions, but also multiple or single questions, open answer questions (single word or essay questions) or including upload points in Moodle exams. It is possible to use any combination in one exam, eg. two numeric and three multiple choice questions.\ninsert example ????\nR/exams does not only have statistical applications, the look of the exam is entirely customizable. It is also possible to include data, graphs, pictures and other things, see ????.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#how-can-rexams-prohibit-cheating",
    "href": "first-steps.html#how-can-rexams-prohibit-cheating",
    "title": "First Steps",
    "section": "How can R/exams prohibit cheating?",
    "text": "How can R/exams prohibit cheating?\nWith R/exams it is possible to create a (very) large number of different versions of the same exam. (see ???? conversion) Slight automatic alterations lead to an individualized exam for each student. For example, this can be used to be able to use the same materials for different exercise groups or to prohibit cheating by having slightly different questions for each student.",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#in-what-ways-can-an-exam-be-individualized",
    "href": "first-steps.html#in-what-ways-can-an-exam-be-individualized",
    "title": "First Steps",
    "section": "In what ways can an exam be individualized?",
    "text": "In what ways can an exam be individualized?\nThere are multiple ways of individualizing an exam, for example dynamically changing the (con)text of the questions. This is also particularly useful when creating exams used for multiple study programs at BOKU in order to have tailored exams for each of them.\nNumbers or data can also be randomly sampled, meaning each student will get individual results.\nIt is also possible to create a pool of True/False statements which are then randomly drawn when creating an exam. In addition, the answer options for multiple choice questions can be individualized in a similar way.\nFor implementations and tutorials see ????",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "first-steps.html#how-can-the-exams-be-corrected",
    "href": "first-steps.html#how-can-the-exams-be-corrected",
    "title": "First Steps",
    "section": "How can the exams be corrected?",
    "text": "How can the exams be corrected?\nFor each output format, there is a different method for correcting the exams.\nFor Moodle quizzes, the correct solutions are imported automatically as well, meaning they are graded automatically. The allocation of points can also be adjusted using R/exams. See ????\nFor pdf exams, an answer sheet is provided, but it is also possible to automatically grade scans of the students’ multiple choice exams using R/exams. See ????",
    "crumbs": [
      "First Steps"
    ]
  },
  {
    "objectID": "add-ons.html",
    "href": "add-ons.html",
    "title": "Add-ons of .Rmd-files",
    "section": "",
    "text": "This will describe how to include additional things, e.g: tables, pictures, graphs, csv-files, etc.",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#inline-r-code",
    "href": "add-ons.html#inline-r-code",
    "title": "Add-ons of .Rmd-files",
    "section": "Inline R Code",
    "text": "Inline R Code\nInline code can be used to display R objects, which change dynamically, in static text. Instead of manually writing each instance of a resulting number in the text, inline code allows automatic pasting of the number and changes automatically when the corresponding result changes. For example, when providing a result that is calculated using randomly drawn numbers, the displayed number adjusts accordingly based on which numbers are drawn.\nInline R code is always fenced by backticks (`) and before the object or function there is always an “r” to mark the language that should be used. When put together inline R code looks like this for example:\nThe mean of the data is `r mean_data`. \n\nWhen the markdown is rendered, this pastes the R variable mean_data at the end of the sentence. When mean_data is 5.29, it looks like this:\nThe mean of the data is 5.29. \n\n\n\n\n\n\nImportant\n\n\n\nAll objects called in inline code need to be defined in a code chunk beforehand. In order for the above example to work in an .Rmd file, there needs to be the following chunk before any inline code containing mean_data.\n```{r}\n#mean is calulcated and rounded to two digits\nmean_data &lt;- mean(c(3, 4, 5, 5, 6, 7, 7)) |&gt; round(digits = 2) \n```",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#tables",
    "href": "add-ons.html#tables",
    "title": "Add-ons of .Rmd-files",
    "section": "Tables",
    "text": "Tables\n\nManual Creation\nThe | do not need to be vertically aligned, it just makes it more readable when creating the table.\nInline code can also be included in the table.\n| Header 1 | Header 2 | Header 3 | \n|----------|----------|----------| \n| x1       | y1       | z1       |\n| x2       | y2       | z2       |\n| x3       | y3       | z3       |\nWhen rendered, the table looks like this:\n\n\n\nHeader 1\nHeader 2\nHeader 3\n\n\n\n\nx1\ny1\nz1\n\n\nx2\ny2\nz2\n\n\nx3\ny3\nz3\n\n\n\nColumns can also have different alignments marked by :.\n| right | left | default | center |\n|------:|:-----|---------|:------:|\n|x1     |y1    |z1       |a1      |\nWhen rendered it appears like this:\n\n\n\nright\nleft\ndefault\ncenter\n\n\n\n\nx1\ny1\nz1\na1\n\n\n\n\n\nAutomatic Creation of tables\nUsing the function kable()from the knitrpackage, objects like dataframes or matrices can be converted automatically to a table for display. For example, this code chunk converts the data frame data into a markdown table automatically including the column names as headers in this case.\n```{r}\nknitr::kable(data)\n```\nThe table then looks like this:\n\n\n\n\n\nheight\nweight\nage\n\n\n\n\n176.9\n60.9\n24\n\n\n176.4\n59.5\n46\n\n\n195.3\n84.9\n45\n\n\n169.2\n62.6\n43\n\n\n157.2\n67.7\n28\n\n\n\n\n\nThere are many more (styling) options for markdown tables, see here the help page for kable, ?kable, and here for more ????",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#pictures",
    "href": "add-ons.html#pictures",
    "title": "Add-ons of .Rmd-files",
    "section": "Pictures",
    "text": "Pictures\nPictures can be included as well, by using the following syntax:\n![alt text](path_or_link/to/file)\nUsing the link to the BOKU logo, this then looks like this (for a specified width):\n\nAdditonal parameters, like (relative) height, width, etc. can be specified as well as follows:\n![alt text](path_or_link/to/file){width=\"40%\"}\nSee here for more info ??????",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#graphs",
    "href": "add-ons.html#graphs",
    "title": "Add-ons of .Rmd-files",
    "section": "Graphs",
    "text": "Graphs",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#links",
    "href": "add-ons.html#links",
    "title": "Add-ons of .Rmd-files",
    "section": "Links",
    "text": "Links",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#csv-files",
    "href": "add-ons.html#csv-files",
    "title": "Add-ons of .Rmd-files",
    "section": ".csv-Files",
    "text": ".csv-Files",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "add-ons.html#markdown-options",
    "href": "add-ons.html#markdown-options",
    "title": "Add-ons of .Rmd-files",
    "section": "Markdown options",
    "text": "Markdown options\nbold, italic, etc",
    "crumbs": [
      "Add-ons",
      "Add-ons to .Rmd-files"
    ]
  },
  {
    "objectID": "examples/example_schoice.html",
    "href": "examples/example_schoice.html",
    "title": "Question",
    "section": "",
    "text": "Question 1\nWhat does the term “molar mass” refer to?\n##ANSWER1##\nQuestion 2\nWhich of the following is the lightest element?\n##ANSWER2##\n\n\n\nThe number of molecules in one mole of a substance\nThe mass of one mole of a substance\nThe number of atoms in one mole of a substance\nThe charge of a mole of ions\nOxygen\nHydrogen\nCarbon\nHelium"
  },
  {
    "objectID": "examples/example_schoice.html#answerlist",
    "href": "examples/example_schoice.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "The number of molecules in one mole of a substance\nThe mass of one mole of a substance\nThe number of atoms in one mole of a substance\nThe charge of a mole of ions\nOxygen\nHydrogen\nCarbon\nHelium"
  },
  {
    "objectID": "examples/example_schoice.html#answerlist-1",
    "href": "examples/example_schoice.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nFalse\nTrue\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse"
  },
  {
    "objectID": "examples/example_num.html",
    "href": "examples/example_num.html",
    "title": "Question",
    "section": "",
    "text": "Question 1\nWhat is the atomic number of hydrogen in the periodic table? ##ANSWER1##\nQuestion 2\nCalculate the molar mass of water (\\(H_2O\\)). Use the following molar masses:\n\nHydrogen (\\(H\\)): 1.008 \\(g/mol\\)\nOxygen (\\(O\\)): 16 \\(g/mol\\)\n\nProvide your answer in grams per mole (\\(g/mol\\)). ##ANSWER2##"
  },
  {
    "objectID": "examples/example_num.html#answerlist-1",
    "href": "examples/example_num.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nThe atomic number of hydrogen is \\(1\\) because it has one proton in its nucleus.\nThe molar mass of H2O is calculated by adding the molar masses of two hydrogen atoms and one oxygen atom.\n\n\\(M_{H_{2}O} = 2 \\cdot M_H + M_O = 2 \\cdot 1.008 + 16 = 18.016\\) (g/mol)"
  },
  {
    "objectID": "r-exams.html",
    "href": "r-exams.html",
    "title": "R, RStudio and R/exams",
    "section": "",
    "text": "This page gives a bit more information about R, RStudio and R/exams, however in general the documentation focuses on the parts of R/exams that are relevant for creating the exams at BOKU. It is by no mean comprehensive and there already exists a lot of documentation for R, RStudio and R/exams.\n\nR\nR is an open source software and freely available for all common platforms. It has many statistical applications, but is also used in various other fields. There are many extra packages that can easily be installed from CRAN (Comprehensive R Archive Network), where a lot of packages are maintained.\nDownload R here from CRAN.\nSee how to install R and RStudio.\nHow to install packages like R/exams:\ninstall.packages(\"package_name\") #insert the name of the package instead of package_name\n\ninstall.packages(\"exams\") #install the exams package \nlibrary(exams) #loads the contents of the package to make them available \n\n\nRStudio\nRStudio is an integrated development environment (IDE) for R. An IDE is useful for writing and editing code, as it includes additional windows besides the console where both code and results are printed, such as an editing window, a help page, a viewer for plots and many more. All in all, it makes writing in R more comfortable and helps to keep an overview.\nDownload Rstudio here.\n\n\nR/exams\nThe R/exams package is used for automatically generating and evaluating exams. It was developed by Achim Zeileis.\nIt can be found at CRAN here.",
    "crumbs": [
      "R and R/exams Info"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "structure-Rmd.html",
    "href": "structure-Rmd.html",
    "title": "Structure of an .Rmd-file",
    "section": "",
    "text": "The .Rmd is the main file, where all the information about the exercise is contained. It follows a basic structure, with four sections, “Data Generation”, “Question”, “Solution” and “Meta-information”. Their purpose will be described in detail in the following sections.",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#data-generation",
    "href": "structure-Rmd.html#data-generation",
    "title": "Structure of an .Rmd-file",
    "section": "Data Generation",
    "text": "Data Generation\nIn this section of the .Rmd-file, the questions (including answer options for single/multiple choice questions), solutions, the types of questions, explanations and tolerances for solutions are created and stored in list objects for later. In addition there are many additional possibilities, like sampling data, creating graphs, importing pictures etc. which will be discussed later (See section ???????)\n\nDescription of the lists\nThe five necessary lists are questions, solutions, types, explanations and tolerances, which all have the same length, which is equal to the number of questions in the exercise. For example, in an exam with 5 multiple choice questions, the length of the lists is 5.\nDepending on the type and simplicity of the question, some of the lists might not be necessary. (see ??????)\nThe list questions contains the answer options for single choice/multiple choice questions, not the questions itself. The actual questions are written down in the section “Question”. For numeric and string questions, this list contains placeholders ““, since no answer options are given. (more on the types of questions see ??????)\nThe list solutions contains the solutions for all the questions. For numeric questions, that is a number, (e.g: 123), for string questions a string like \"hello world\" is expected. The solution for single & multiple choiche questions is a boolean vector containing TRUE/FALSE. For each answer option, one instance of TRUE or FALSE is needed. For example, a multiple choice question with 5 answer options, where one option (in this case the second answer option) is correct, would have a solution vector like this:\nc(FALSE, TRUE, FALSE, FALSE, FALSE)\nThe list types specifies the type of question for each individual question. Possible values are\n\nnumeric (“num”)\nstring (“string”)\nsingle choice (“schoice”)\nmultiple choice (“mchoice”)\n\nThe optional list explanations contains the feedback that is shown. This can be the complete solutions (it should be then formatted as a list) or additional information like the seed, that was used to create this exercise, session info, etc., which can be written in the “Solution” section. (see ??????)\nThe list tolerances is only necessary for numeric questions, where it is desired to have an interval, in which the solution is accepted as correct, even though the numbers are not perfectly equal. This is important for accommodating rounding differences.\n\n\n\n\n\n\nWarning\n\n\n\nCareful when random generating numbers and setting an (absolute) tolerance interval that is too narrow, then the true solution could lie outside of the tolerance interval.\n\n\n\n\nCreating the lists\nThey are initialized as empty lists, which are later filled with the desired information via sub-setting. see ?????\nquestions &lt;- list() \nsolutions &lt;- list() \ntypes &lt;- list()\nexplanations &lt;- list() \ntolerances &lt;- list()",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#question",
    "href": "structure-Rmd.html#question",
    "title": "Structure of an .Rmd-file",
    "section": "Question",
    "text": "Question\nIn this section, all the questions, that should be included in the exam, are written down. This is done in natural language, however bits of code (including R objects), graphs, data, etc. can be included (see ??????)\nAdditonal text, like instructions, hints, context, etc. is also written down in this section.\n\nQuestions with answer fields\nThe answer fields mark the place were the answer input should be placed, for example in a moodle quiz, the place where the empty answer box is placed.\nAnswer fields are marked by ##ANSWERi##where i is the number of the question, starting with 1.\n\n\n\n\n\n\nnumeric example\n\n\n\nNumeric question: How many continents are there? ##ANSWER1##\nIn this case, the answer field is a place-holder, nothing will be displayed, which equals an empty answer field in moodle.\n\n\nFor single/multiple choice questions, ##ANSWERi## represents the answer options.\n\n\n\n\n\n\nschoice example\n\n\n\nSingle choice question: Is Vienna the capital of Austria? ##ANSWER2##\nWith the correct set-up, this will display yes/no instead of the answer field. In moodle this is a drop-down menu with the two answer options.\n\n\n\n\n\n\n\n\nmchoice example\n\n\n\nMultiple choice question with text components as answer options: The number 3 is ##ANSWER3## 1.\nPossible answer options are “greater than”, “smaller than”, “equal to”, which would be displayed instead of the answer field. In moodle all answer options are shown as tickable boxes.\n\n\npossible add-ons: pictures, graphs, data, csv.files tables, R-code, etc. see description later\nThe function answerlist() from R/exams package converts the answer options, which are stored in the list object questions into the necessary format.\nanswerlist(unlist(questions), markup = \"markdown\")",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#solution",
    "href": "structure-Rmd.html#solution",
    "title": "Structure of an .Rmd-file",
    "section": "Solution",
    "text": "Solution\nThe section “Solution” can be used to provide solutions in the form of explanations. It does not create the solutions to the questions (see ?????) and nor is it responsible for assessing/grading questions. Instead it can be used as a reference to review questions or provide feedback. This type of information is created in this section.\nThe solutions list contains the actual solutions to the questions, which are used for deeming an answer correct/incorrect, however these are not directly displayed in this section.\nThe explanations list holds any information that can be possibly given as feedback. This can, but does not have to, include the actual solutions, depending on the type of exam one is aiming for. This list is optional, general feedback can be normally written as text in this section. See ???? two sections below\n\nActual Solutions as explanations\nThe correct solutions to the questions can be displayed in the appropriate format in the generated output.\nSome solutions need to be converted to a more understandable format before being displayed. The solutions to schoice/mchoice questions are stored as TRUE/FALSE vectors and in the following code chunk they are converted to “True” and “False” strings, which are then displayed as explanations to the schoice and mchoice questions.\nfor (x in 1:length(solutions)) {\n\n  if (types[x] %in% c(\"schoice\", \"mchoice\") { \n    explanations[x] &lt;- solutions[x] |&gt; lapply(function(x) ifelse(x, \"True\", \"False\"))\n  } \n  \n  else {\n    explanations[x] &lt;- solutions[x]\n  }\n}\nThen the function answerlist() from R/exams processes the explanations list to adjust it to the format needed for conversion of the .Rmd-file to the desired output.\nanswerlist(unlist(explanations), markup = \"markdown\")\n\n\nOther types of explanations\nWhen the desired feedback is any type of text, like in-depth explanations or providing more context, or more technical details like calculation steps, the explanations list is not needed. It can simple written as normal text in the .Rmd file under the “Solution” section.\nExamples of feedback:\n\n\n\n\n\n\nnumeric example\n\n\n\nThe correct answer is 7, because there are seven recognized continents on Earth: \nAfrica, Antarctica, Asia, Europe, North America, Oceania (or Australia), and South America.\n\n\n\n\n\n\n\n\nmchoice example\n\n\n\nThe correct answers are \"A\" and \"C.\" \nOption A is correct because..., and Option C is correct because... \nOption B, however, is incorrect because .....\n\n\nIn some cases it can be useful to document the seed used, for example when randomly generating numbers or doing any kind of sampling. Providing this information in the “Solution” section to either students or even oneself, when for example reviewing questions, can ensure reproducibility.\nSee ???? for more information on how to dynamically display R objects (like seeds) in the exam.",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "structure-Rmd.html#meta-information",
    "href": "structure-Rmd.html#meta-information",
    "title": "Structure of an .Rmd-file",
    "section": "Meta-information",
    "text": "Meta-information\nThis section contains all the information necessary for the conversion from an .Rmd-file to the desired output (HTML, Moodle (xml), pdf, …) see ???\n\nMeta-information\n\n\n\n\n\n\nTag\nDescription\n\n\n\n\nexname\nname for the exam, should be short and informative\n\n\nextitle\nlonger name for the exam, displayed in Moodle\n\n\nextype\nspecification of the type of exam, e.g: “cloze”\n\n\nexsolution\nsolutions to the questions\n\n\nextypes\nspecification of the types of questions used in the exam\n\n\nextol\ntolerances used for numeric questions\n\n\nexshuffle\nlogical or numeric value, if/how answer options for schoice/mchoice questions should be shuffled\n\n\nexversion\nversion of the exam\n\n\n\nAlso see vignette R/exams for additional tags and more information.\n\nTypes of Meta-information tags\n\nexname\nExercise name, typically a unique identifier for each exercise, helping to manage and retrieve exercises easily from an exercise pool.\n\n\nextitle\nSets the title of the exercise. Titles can be dynamically generated by embedding R objects in the text to adapt the title based on the exam context. see ?????\n\n\nextype\nSpecifies the type of exam. This is different to the list object types from the “Data generation” section. A very common type is “cloze”, which is a type of exam which contains different types of questions, for example a combination of numeric and schoice questions in one exam. If the exam just contains one type of question, for example only multiple choice questions, then this can be specified as well. see ???? for more information on non-cloze exams.\n\n\nexsolution\ncontains the correct solutions for the exam in the necessary format for the conversion of the .Rmd-file. When more than one question (and therefore more than one solution) is created, all solutions need to be in the order of the questions and separated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(solutions, collapse = \"|\")\nThe resulting R object needs to be dynmically included in the .Rmd-file (see ?????? for details).\n\n\nexclozetypes\nWhen creating an exam of the type “cloze” (the exam contains different types of questions), the type of each question has to be specified. This information is stored in the list typesfrom above. When more than one question (and therefore more than one type) is created, all types need to be in the order of the questions and separated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(types, collapse = \"|\")\nThe resulting R object needs to be dynmically included in the .Rmd-file (see ?????? for details).\n\n\nextol\ncontains the tolerances used for the answers to numeric questions. When creating an exam of type “cloze”, the tolerances are stored in the list tolerances. They need to be in the order of the questions with empty interations for questions where tolerances are not applicable, e.g. string questions. For details see ??????? (subsetting the lists). All tolerances need to be seperated by “|”. This can either be achieved by manually writing down all solutions or with the following code chunk:\npaste(tolerances, collapse = \"|\")\nThe resulting R object needs to be dynamically included in the .Rmd-file (see ?????? for details).\n\n\nexshuffle\nCan be a logical or an integer and determines if or how the answer options are shuffled. When it is set to TRUE the answer options are not always displayed in the same order, for example when creating multiple versions of the same exam. When set to an integer, this determines the number of multiple choice answer options shown. For example, when 6 answer options are available through the list object questions and exshuffle is set to 4, then 4 out of 6 questions (always including the true option(s)) are displayed.\n\n\nexversion\nSpecifies the version of the exam, useful for distinction when altering the .Rmd-file and creating a new set of exercises.\n\n\n\n\n\n\nExample\n\n\n\nThis is the meta-information of a very simple exam, containing one numeric question, one single choice and one multiple choice question with three answer options, without any automation using the lists and paste().\nexname: homework_1\nextitle: Homework 1: Topic A  \nextype: cloze\nexsolution: 42.1|TRUE|c(FALSE,TRUE, FALSE)\nexclozetype: num|schoice|mchoice\nextol: 0.5|0|0\nexshuffle: TRUE\nexversion: v1\n\n\n\n\n\nExemplary structure of the Meta-information\nBelow is an example of how the “meta-information” section could look with some of the R/exams tags explained above, as well as automatic conversion of the solutions, types and tolerances list to the correct format using paste().\nMeta-information\n================\nexname: Abcde\nextitle: Abcde: topic xyz \nextype: cloze\nexsolution: `r paste(solutions, collapse = \"|\")`\nexclozetype: `r paste(types, collapse = \"|\")`\nextol: `r paste(tolerances, collapse = \"|\")`\nexshuffle: TRUE\nexversion: v1",
    "crumbs": [
      "Rmd-file",
      "Structure"
    ]
  },
  {
    "objectID": "ideas.html",
    "href": "ideas.html",
    "title": "Ideas",
    "section": "",
    "text": "This is the page for future ideas and important notes for documentation.\nWriting style (internal)",
    "crumbs": [
      "Notes"
    ]
  },
  {
    "objectID": "ideas.html#footnotes",
    "href": "ideas.html#footnotes",
    "title": "Ideas",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://stackoverflow.com/questions/78569518/why-is-r-inline-code-not-executed-in-quarto-in-some-situations↩︎",
    "crumbs": [
      "Notes"
    ]
  },
  {
    "objectID": "example3.html",
    "href": "example3.html",
    "title": "Single Choice Example",
    "section": "",
    "text": "TODO: Leerzeilen aus Rmd files löschen und zeilen anpassen\nThis is an exercise containing two single choice questions about molar massses.\nThe whole example as an .Rmd-file can be downloaded here:\nDownload\nAfter conversion with R/exams the exercise looks like this for different output types.",
    "crumbs": [
      "Examples",
      "Single Choice Example"
    ]
  },
  {
    "objectID": "example3.html#creating-the-list-structure",
    "href": "example3.html#creating-the-list-structure",
    "title": "Single Choice Example",
    "section": "Creating the List Structure",
    "text": "Creating the List Structure\nThis section creates and fills the lists which contain the questions, answers, etc.. The answer list is empty, because no answer options are needed for text questions, as they are answered with a string.\nThe solution to the question, the type of question, as well as a more elaborate explanation are specified for each question.\n\n\n\n\n\n\nWarning\n\n\n\nThe following code has to be placed within a code chunk in the .Rmd-file. See here ?????",
    "crumbs": [
      "Examples",
      "Single Choice Example"
    ]
  },
  {
    "objectID": "example3.html#question-section",
    "href": "example3.html#question-section",
    "title": "Single Choice Example",
    "section": "Question Section",
    "text": "Question Section\nThe next section contains the question text, including the marked spaces ##ANSWERi## for the answer fields and a necessary code section, which does some formating which is required for the later conversion. This is markdown text, which will appear bold/italic/etc. after conversion.\nIt also includes a code chunk, which converts the answers list to the necessary format.\nQuestion\n========\n*Question 1*\n\nWhat does the term \"molar mass\" refer to?\n\n##ANSWER1##\n\n*Question 2*\n\nWhich of the following is the lightest element?\n\n##ANSWER2##\n\n```{r questionlist, echo = FALSE, results = \"asis\"}\nanswerlist(unlist(answers), markup = \"markdown\")\n```",
    "crumbs": [
      "Examples",
      "Single Choice Example"
    ]
  },
  {
    "objectID": "example3.html#solution-section",
    "href": "example3.html#solution-section",
    "title": "Single Choice Example",
    "section": "Solution Section",
    "text": "Solution Section\nIn this section, additional information and/or the exact solutions can be given. In this case, there is a more elaborate explanation as a solution for each question. Additionally, the code chunk included below converts the TRUE and FALSE objects into a more readable format of “True” and “False”, however this could be in any other format as well.\nSolution\n========\n*Solution 1*\n\nThe molar mass is the mass of one mole of a substance, expressed in grams per mole (g/mol).\n\n*Solution 2*\n\nHydrogen is the lightest element, with an atomic mass of approximately 1 g/mol.\n\n\n```{r solutionlist, echo = FALSE, results = \"asis\"}\n# Convert solutions to \"True\" or \"False\"\nexplanations &lt;- lapply(solutions, function(x) ifelse(x, \"True\", \"False\"))\nsolutions &lt;- lapply(solutions, mchoice2string)\n\n# Display explanations\nanswerlist(unlist(explanations), markup = \"markdown\")\n```",
    "crumbs": [
      "Examples",
      "Single Choice Example"
    ]
  },
  {
    "objectID": "example3.html#meta-information",
    "href": "example3.html#meta-information",
    "title": "Single Choice Example",
    "section": "Meta-Information",
    "text": "Meta-Information\nThis contains the meta information needed for conversion. See here ?????\nThe “source code” is written in markdown and contains inline R code.\nMeta-information\n================\nexname: example_schoice\nextitle: molmass and lightest element\nextype: cloze\nexsolution: `r paste(solutions, collapse = \"|\")`\nexclozetype: `r paste(types, collapse = \"|\")`\nexshuffle: TRUE\nexversion: v1\nIf the “code” above is evaluated, the section looks like this:\nMeta-information\n================\nexname: example_schoice\nextitle: molmass and lightest element\nextype: cloze\nexsolution: c(FALSE, TRUE, FALSE, FALSE)|c(FALSE, TRUE, FALSE, FALSE)\nexclozetype: schoice|schoice\nexshuffle: TRUE\nexversion: v1",
    "crumbs": [
      "Examples",
      "Single Choice Example"
    ]
  },
  {
    "objectID": "example2.html",
    "href": "example2.html",
    "title": "String Example",
    "section": "",
    "text": "This is an exercise containing two text questions about the periodic table.\nThe whole example as an .Rmd-file can be downloaded here:\nDownload\nAfter conversion with R/exams the exercise looks like this for different output types.",
    "crumbs": [
      "Examples",
      "String Example"
    ]
  },
  {
    "objectID": "example2.html#creating-the-list-structure",
    "href": "example2.html#creating-the-list-structure",
    "title": "String Example",
    "section": "Creating the List Structure",
    "text": "Creating the List Structure\nThis section creates and fills the lists which contain the questions, answers, etc.. The answer list is empty, because no answer options are needed for text questions, as they are answered with a string.\nThe solution to the question, the type of question, as well as a more elaborate explanation are specified for each question.\n\n\n\n\n\n\nWarning\n\n\n\nThe following code has to be placed within a code chunk in the .Rmd-file. See here ?????\n\n\n\nlibrary(exams)\n# Initialize lists for the questions, answers, solutions, types, explanations (tolerances are not needed if there are no numeric questions)\nanswers &lt;- list()\nsolutions &lt;- list()\ntypes &lt;- list()\nexplanations &lt;- list()\n\n# Define Question 1: first element in periodic table?\nanswers[[1]] &lt;- \"\"  # No predefined answer for string\nsolutions[[1]] &lt;- \"Hydrogen\"\ntypes[[1]] &lt;- \"string\"\nexplanations[[1]] &lt;- \"The first element in the periodic table is Hydrogen because it has an atomic number of 1.\"\n\n# Define Question 2: element with the abbreviation O?\nanswers[[2]] &lt;- \"\"  # No predefined answer for string\nsolutions[[2]] &lt;- \"Oxygen\"\ntypes[[2]] &lt;- \"string\"\nexplanations[[2]] &lt;- \"The element with the abbreviation O is Oxygen, a crucial element for respiration and water.\"",
    "crumbs": [
      "Examples",
      "String Example"
    ]
  },
  {
    "objectID": "example2.html#question-section",
    "href": "example2.html#question-section",
    "title": "String Example",
    "section": "Question Section",
    "text": "Question Section\nThe next section contains the question text, including the marked spaces ##ANSWERi## for the answer fields and a necessary code section, which does some formating which is required for the later conversion. This is markdown text, which will appear bold/italic/etc. after conversion.\nIt also includes a code chunk, which converts the answers list to the necessary format.\nQuestion\n========\n*Question 1*\n\nWhat is the name of the first element in the periodic table? ##ANSWER1##\n\n*Question 2*\n\nWhat is the element with the abbreviation O? ##ANSWER2##\n\n```{r questionlist, echo = FALSE, results = \"asis\"}\nanswerlist(unlist(answers), markup = \"markdown\")\n```",
    "crumbs": [
      "Examples",
      "String Example"
    ]
  },
  {
    "objectID": "example2.html#solution-section",
    "href": "example2.html#solution-section",
    "title": "String Example",
    "section": "Solution Section",
    "text": "Solution Section\nIn this section, additional information and/or the exact solutions can be given. In this case, the information which is stored in the explanations list is pasted here through this code chunk and displayed.\nSolution\n========\n```{r solutionlist, echo = FALSE, results = \"asis\"}\nanswerlist(unlist(explanations), markup = \"markdown\")\n```",
    "crumbs": [
      "Examples",
      "String Example"
    ]
  },
  {
    "objectID": "example2.html#meta-information-section",
    "href": "example2.html#meta-information-section",
    "title": "String Example",
    "section": "Meta Information Section",
    "text": "Meta Information Section\nThis contains the meta information needed for conversion. See here ?????\nThe “source code” is written in markdown and contains inline R code.\nMeta-information\n================\nexname: example_string\nextitle: elements\nextype: cloze\nexsolution: `r paste(solutions, collapse = \"|\")`\nexclozetype: `r paste(types, collapse = \"|\")`\nexshuffle: TRUE\nexversion: v1\nIf the “code” above is evaluated, the section looks like this:\nMeta-information\n================\nexname: example_string\nextitle: elements\nextype: cloze\nexsolution: Hydrogen|Oxygen\nexclozetype: string|string\nexshuffle: TRUE\nexversion: v1",
    "crumbs": [
      "Examples",
      "String Example"
    ]
  },
  {
    "objectID": "example1.html",
    "href": "example1.html",
    "title": "Numeric Example",
    "section": "",
    "text": "TODO: description of knitr tags\nThis is an example about molar masses of hydrogen, oxygen and H20, which contains two numeric questions.\nThe whole example as an .Rmd-file can be downloaded here:\n Download \nAfter conversion with R/exams the exercise looks like this for different output types.\n\nHTMLPDFMoodle\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Generation\nFirst is the so-called data generating process. In this case no real data is being generated within in this code chunk, it just includes some preparatory work of defining variables and creating the objects needed later.\nFor a simple example, giving this process its own section might seem a bit like going overboard, however, once examples become more complex, it is easier to handle this as the first part in a separate section.\n\n\n\n\n\n\nWarning\n\n\n\nThe following code has to be placed within a code chunk in the .Rmd-file. See here ?????\n\n\n\nlibrary(exams) #exams package needs to be loaded for all functions to be available \n\n#atomic number of H\nn_H &lt;- 1\n# Define the molar masses of hydrogen (H) and oxygen (O)\nm_h &lt;- 1.008 # molar mass of hydrogen in g/mol\nm_o &lt;- 16.00 # molar mass of oxygen in g/mol\n\n# Calculate the molar mass of the water molecule (H2O)\nm_h2o &lt;- 2 * m_h + m_o\n\n\n\nCreating the List Structure\nThe next step is to create and fill the lists needed for creating the exam. This is done within a code chunk. (see here and here for a detailed explanation of these processes, here for an explanation of the structure ???? )\nFirst the empty lists are created and then they are filled question by question. Each question can have answer options, however for numeric questions, these are not needed. (see here for single/multiple choice example ?????). A solution is provided for each question using the predefined variables from the data generation section. Using named variables instead of the number itself, gives a better overview and allows for easier adjustment, as only the number in the data generating section has to be adjusted. The type also has to be specified for each question, in this case “num” for numeric. In addition, explanations are also added, these are optional but provide extra information as feedback. The tolerances are set in a separate list as well.\n\n\n\n\n\n\nWarning\n\n\n\nThe following code has to be placed within a code chunk in the .Rmd-file. See here ?????\n\n\n\n# Create lists for necessary information\nanswers &lt;- list()\nsolutions &lt;- list()\ntypes &lt;- list()\nexplanations &lt;- list()\ntolerances &lt;- list()\n\n# Define Question 1: atomic number of hydrogen\nanswers[[1]] &lt;- \"\"  # No answer options needed for numeric questions\nsolutions[[1]] &lt;- n_H\ntypes[[1]] &lt;- \"num\" #numeric\nexplanations[[1]] &lt;- \"The atomic number of hydrogen is $1$ because it has one proton in its nucleus.\"\ntolerances[[1]] &lt;- 0  # No tolerance\n\n# Define Question 2: molar mass of water\nanswers[[2]] &lt;- \"\" # no answer options needed for numeric questions. \nsolutions[[2]] &lt;- m_h2o\ntypes[[2]] &lt;- \"num\" \nexplanations[[2]] &lt;- \"The molar mass of H2O is calculated by adding the molar masses of two hydrogen atoms and one oxygen atom.\"\ntolerances[[2]] &lt;- 0.5 # Allow for small rounding errors\n\n\n\nQuestion Section\nThe next section contains the question text, including the marked spaces ##ANSWERi## for the answer fields and a necessary code section, which does some formating which is required for the later conversion.\nQuestion\n========\n\n*Question 1*\n\nWhat is the atomic number of hydrogen in the periodic table? ##ANSWER1##\n\n*Question 2*\n\nCalculate the molar mass of water ($H_2O$). Use the following molar masses:\n\n-   Hydrogen ($H$): `r m_h` $g/mol$\n\n-   Oxygen ($O$): `r m_o` $g/mol$\n\nProvide your answer in grams per mole ($g/mol$). ##ANSWER2##\n\n```{r questionlist, echo = FALSE, results = \"asis\"}\nanswerlist(unlist(answers), markup = \"markdown\")\n```\n\n\nSolution Section\nIn this section, additional information and/or the exact solutions can be given. In this case, the explanations from the explanations list are pasted here and an additionl formula is provided.\nSolution\n========\n\n```{r solutionlist, echo = FALSE, results = \"asis\"}\nanswerlist(unlist(explanations), markup = \"markdown\")\n```\n\n$M_{H_{2}O} = 2 \\cdot M_H + M_O = 2 \\cdot `r m_h` + `r m_o` = `r m_h2o`$ (g/mol)\n\n\nMeta Information Section\nThis contains the meta information needed for conversion. See here ?????\nThe “source code” is written in markdown and contains inline R code.\nMeta-information\n================\nexname: example_num \nextitle: molmass of water \nextype: cloze \nexsolution: `r paste(solutions, collapse = \"|\")` \nexclozetype: `r paste(types, collapse = \"|\")` \nextol: `r paste(tolerances, collapse = \"|\")` \nexshuffle: TRUE \nexversion: v1\nIf the “code” above is evaluated, the section looks like this:\nMeta-information\n================\nexname: example_num\nextitle: molmass of water \nextype: cloze\nexsolution: 1|18.016\nexclozetype: num|num\nextol: 0|0.5\nexshuffle: TRUE\nexversion: v1",
    "crumbs": [
      "Examples",
      "Numeric Example"
    ]
  },
  {
    "objectID": "conversion.html",
    "href": "conversion.html",
    "title": "Conversion of an .Rmd-file",
    "section": "",
    "text": "Caution\n\n\n\nFor now, the script 10_kontingenztafel_conversion.R is the only one that is up to date like it is described here. The other scripts need to be updated to the new structure.\nThe directory of each exercise contains an R script called exname_conversion.R, where exname is the name of that exercise. This script can be run to generate HTML previews of the exercise or XML files which can be imported into Moodle. Parameters for converting the exercises (e.g., the seed, number of copies, and paths to the exercise and data files) are set in the config file of the exercise, exname_config.R, which can be found in the directory of each exercise.\nIf no specific story is selected, the conversion script will cycle through all stories of the selected programs and generate an exercise for each story. The number of exercises generated is determined by the copies parameter.\nBy default, HTML previews of the exercises are opened in the default browser. The XML files are stored in the exercise’s root directory.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#setting-the-parameters",
    "href": "conversion.html#setting-the-parameters",
    "title": "Conversion of an .Rmd-file",
    "section": "Setting the parameters",
    "text": "Setting the parameters\nIn the exercise config file exname_config.R, the parameters for generating the exercises are set. The following parameters are available:\n\nseed: A seed for the random number generator. This ensures that the same set of exercises is generated each time the code is run.\ncopies: The number of times the exercise should be generated when using the XML format. If parts of the exercise are randomized (e.g., drawing from a distribution or a random subset), each copy will be randomly generated. However, the seed ensures that always the same set of randomized exercises is generated.\nprogram: Select one or more programs from which the stories will be drawn. See the file containing the stories for the available programs. NULL will use all programs.\nstory: Select a specific story to be used. NULL will randomly select a story from the selected programs.\nexercise_seed: A seed for the random number generator within the exercise. This ensures that the same specific exercise is generated each time the code is run. If NULL, the seed will be randomly generated using the seed parameter.\nconverter: The converter to be used by the exams package to convert the exercise Rmarkdown files.\nexercise_dir: The path to the directory containing the exercise Rmarkdown file.\nexercise_file: The name of the exercise Rmarkdown file.\ndata_dir: The path to the directory containing the data files.\ntemp_dir: The name of the directory storing temporary files. If not present, the directory will be created. Warning: All files in the temporary directory will be deleted when the code is run!\nout_basename: The base name of the output files.\nout_type: The type of the output files. Can be either html for a preview in the browser or xml for import into Moodle.\n\n\n\n\n\n\n\nTip\n\n\n\nWhen generating exercises for a course, it is recommended to set the seed to a fixed value and note it down. At the start of each semester, a new seed should be set to ensure that the exercises are different from the previous semester.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#html-preview",
    "href": "conversion.html#html-preview",
    "title": "Conversion of an .Rmd-file",
    "section": "HTML preview",
    "text": "HTML preview\n\n\n\n\n\n\nNote\n\n\n\nThe HTML preview of the exercise is not interactive and uses a different styling. The preview looks different from the exercises in Moodle, but can be used to check the content of the exercise.\n\n\nIf the out_type parameter is set to html, an HTML preview will be generated which will open in the default browser. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "conversion.html#xml-generation",
    "href": "conversion.html#xml-generation",
    "title": "Conversion of an .Rmd-file",
    "section": "XML generation",
    "text": "XML generation\nIf the out_type parameter is set to xml, an XML file will be generated which can be imported into Moodle. The XML files are stored in the exercise’s root directory with the out_basename. Intermediary files are stored in the temporary directory, which are deleted after the preview is generated.\n\nPassing external parameters\nThe number of exercise copies specified by the copies parameter will be generated in a loop, using the exams function expar() to pass external parameters to the exercise. For example, the incrementing number of the loop can be passed to the exercise where it is used as index to draw a subset of data. The advantage of this approach is that the subsets are drawn deterministically instead of randomly (which could lead to duplicates or missing subsets).\nThe function takes the exercise file and the external variables as arguments. It then saves an temporary Rmarkdown file of the exercise with the external parameters set. The list of these temporary files is then passed to the exams2moodle() function to generate the XML files.\nIf the copies parameter is a multiple of the number of stories, each story will be drawn an equal number of times.",
    "crumbs": [
      "R-file",
      "Conversion of .Rmd-file"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BOKU Exams",
    "section": "",
    "text": "Documentation for R/exams at BOKU.\n\nLast updated: 2025-01-07",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "This will describe frequently asked questions and common mistakes.",
    "crumbs": [
      "FAQ"
    ]
  },
  {
    "objectID": "examples/example_string.html",
    "href": "examples/example_string.html",
    "title": "Question",
    "section": "",
    "text": "Question 1\nWhat is the name of the first element in the periodic table? ##ANSWER1##\nQuestion 2\nWhat is the element with the abbreviation O? ##ANSWER2##"
  },
  {
    "objectID": "examples/example_string.html#answerlist-1",
    "href": "examples/example_string.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nThe first element in the periodic table is Hydrogen because it has an atomic number of 1.\nThe element with the abbreviation O is Oxygen, a crucial element for respiration and water."
  },
  {
    "objectID": "examples/ex_add.html",
    "href": "examples/ex_add.html",
    "title": "BOKU Exams",
    "section": "",
    "text": "#mean is calulcated and rounded to two digits\nmean_data &lt;- mean(c(3, 4, 5, 5, 6, 7, 7)) |&gt; round(digits = 2) \n\nThe mean of the data is 5.29.\n\nheight &lt;- sample(seq(157, 196, by = 0.1), size = 5)\nweight &lt;- sample(seq(56, 85, by = 0.1), size = 5) \nage &lt;- sample(20:50, size = 5)\ndata &lt;- data.frame(height, weight, age)\n\n\nknitr::kable(data)\n\n\n\n\nheight\nweight\nage\n\n\n\n\n184.9\n58.1\n33\n\n\n178.2\n71.8\n22\n\n\n165.7\n64.7\n49\n\n\n158.8\n80.4\n23\n\n\n180.4\n77.4\n31"
  },
  {
    "objectID": "creation-Rmd.html",
    "href": "creation-Rmd.html",
    "title": "Creation of the .Rmd file",
    "section": "",
    "text": "this section contains info on how to subset the lists in the rmd-file\n\nsubsetting\nwhat type of content needs to be in the lists\nlimitations",
    "crumbs": [
      "Rmd-file",
      "Creation of the .Rmd-file"
    ]
  }
]